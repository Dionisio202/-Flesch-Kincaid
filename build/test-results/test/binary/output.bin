

IYour assignment HAS NOT BEEN SUBMITTED. The following test results only
estimate your grade.


$Your estimated score is: 100.0/100
L(This is not your actual grade for this assignment, just an estimate. Your
Pofficial grade will be calculated after you submit your submission.zip file to

Coursera.


Q------------------------------Assignment Evaluation-----------------------------
Q--------Your solution received points for the following grading rubrics:--------


testArrayIteratorRemove
Rubric Score: 1.0/1.0
OGoal: ArrayIterator.remove() throws an IllegalStateException when remove() is
from an empty ArrayIterator.
Reference: ArrayTests.java

testArrayIteratorHasNext3
Rubric Score: 1.0/1.0
RGoal: ArrayIterator.hasNext() returns true when there is at least one element in
the array.
Reference: ArrayTests.java

testArrayIteratorNext
Rubric Score: 1.0/1.0
NGoal: ArrayIterator.next() throws a NoSuchElementException when there are no
elements in the array.
Reference: ArrayTests.java

testArrayIteratorNext2
Rubric Score: 1.0/1.0
MGoal: ArrayIterator.next() throws a NoSuchElementException when there is at
 least one element in the array.
Reference: ArrayTests.java

testEnsureCapacityInternal
Rubric Score: 1.0/1.0
IGoal: Check if ensureCapacityInternal sets the capacity to at least the
specified minimum capacity.
Reference: ArrayTests.java

testEnsureCapacityInternal2
Rubric Score: 1.0/1.0
OGoal: Check if ensureCapacityInternal does not change the capacity when it is
4already larger than the specified minimum capacity.
Reference: ArrayTests.java

testArrayIteratorHasNext
Rubric Score: 1.0/1.0
OGoal: ArrayIterator.hasNext() returns false when there are no elements in the
array.
Reference: ArrayTests.java

testUncheckedToArray
Rubric Score: 1.0/1.0
KGoal: Check if uncheckedToArray returns the internal array and its length.
Reference: ArrayTests.java

testArrayIteratorHasNext2
Rubric Score: 1.0/1.0
OGoal: ArrayIterator.hasNext() throws a NullPointerException when the array is
null.
Reference: ArrayTests.java

testIndexOf3
Rubric Score: 1.0/1.0
0Goal: Get the index of an element in the array.
Reference: ArrayTests.java

testIndexOf2
Rubric Score: 1.0/1.0
0Goal: Get the index of an element in the array.
Reference: ArrayTests.java

testIndexOf4
Rubric Score: 1.0/1.0
0Goal: Get the index of an element in the array.
Reference: ArrayTests.java

testIndexOf5
Rubric Score: 1.0/1.0
0Goal: Get the index of an element in the array.
Reference: ArrayTests.java

testAddAll
Rubric Score: 1.0/1.0
7Goal: Add all elements from a collection to the array.
Reference: ArrayTests.java

testIsEmpty2
Rubric Score: 1.0/1.0
;Goal: Check if the array is empty after adding an element.
Reference: ArrayTests.java

testAddAll2
Rubric Score: 1.0/1.0
>Goal: Add all elements from an empty collection to the array.
Reference: ArrayTests.java

testIndexOf
Rubric Score: 1.0/1.0
0Goal: Get the index of an element in the array.
Reference: ArrayTests.java

testIsEmpty
Rubric Score: 1.0/1.0
<Goal: Array.isEmpty() returns true when the array is empty.
Reference: ArrayTests.java

testRangeCheck3
Rubric Score: 1.0/1.0
IGoal: Check if rangeCheck does not throw an exception for a valid index.
Reference: ArrayTests.java

testGet
Rubric Score: 1.0/1.0
MGoal: Check if get throws an IndexOutOfBoundsException for an invalid index.
Reference: ArrayTests.java

	testAdd3
Rubric Score: 1.0/1.0
QGoal: Add elements to the array with a specific capacity and check if it is not
"empty and the capacity increases.
Reference: ArrayTests.java

testAddAll6
Rubric Score: 1.0/1.0
BGoal: Check if adding a null array throws a NullPointerException.
Reference: ArrayTests.java

testAddAll5
Rubric Score: 1.0/1.0
JGoal: Add all elements from an empty array to the array with a specified

capacity.
Reference: ArrayTests.java

testRemove
Rubric Score: 1.0/1.0
BGoal: Check if removing an element at an invalid index throws an
IndexOutOfBoundsException.
Reference: ArrayTests.java

testRangeCheck2
Rubric Score: 1.0/1.0
NGoal: Check if rangeCheck throws an IndexOutOfBoundsException for a negative
index.
Reference: ArrayTests.java

	testGet3
Rubric Score: 1.0/1.0
LGoal: Get an element at a valid index and check if it matches the expected
value.
Reference: ArrayTests.java

testSet
Rubric Score: 1.0/1.0
MGoal: Check if set throws an IndexOutOfBoundsException for an invalid index.
Reference: ArrayTests.java

testAddAll3
Rubric Score: 1.0/1.0
7Goal: Add all elements from a collection to the array.
Reference: ArrayTests.java

testRangeCheck
Rubric Score: 1.0/1.0
NGoal: Check if rangeCheck throws an IndexOutOfBoundsException for an invalid
index.
Reference: ArrayTests.java

testAddAll4
Rubric Score: 1.0/1.0
9Goal: Add all elements from an empty array to the array.
Reference: ArrayTests.java

testRemove2
Rubric Score: 1.0/1.0
BGoal: Check if removing an element at a negative index throws an
IndexOutOfBoundsException.
Reference: ArrayTests.java

	testAdd2
Rubric Score: 1.0/1.0
OGoal: Add an element to the array with a specific capacity and check if it is
not empty.
Reference: ArrayTests.java

testRemove3
Rubric Score: 1.0/1.0
NGoal: Remove an element at a valid index and check if the array is not empty.
Reference: ArrayTests.java

	testGet2
Rubric Score: 1.0/1.0
MGoal: Check if get throws an IndexOutOfBoundsException for a negative index.
Reference: ArrayTests.java

	testSet3
Rubric Score: 1.0/1.0
LGoal: Set an element at a valid index and check if it returns the previous
	element.
Reference: ArrayTests.java

testAdd
Rubric Score: 1.0/1.0
@Goal: Add an element to the array and check if it is not empty.
Reference: ArrayTests.java

testAddAll7
Rubric Score: 1.0/1.0
3Goal: Add all elements from an array to the array.
Reference: ArrayTests.java

	testSet2
Rubric Score: 1.0/1.0
MGoal: Check if set throws an IndexOutOfBoundsException for a negative index.
Reference: ArrayTests.java

testRemove4
Rubric Score: 1.0/1.0
NGoal: Remove an element at a valid index and check if the array is not empty.
Reference: ArrayTests.java

testReplaceAll3
Rubric Score: 1.0/1.0
NGoal: Check if replaceAll throws an IllegalArgumentException and applies the
1specified operator to each element in the array.
Reference: ArrayTests.java

testConstructor2
Rubric Score: 1.0/1.0
QGoal: Check if the constructor initializes the array with the elements from the
collection.
Reference: ArrayTests.java

testConstructor3
Rubric Score: 1.0/1.0
QGoal: Check if the constructor throws a NullPointerException when passed a null
collection.
Reference: ArrayTests.java

testToArray2
Rubric Score: 1.0/1.0
RGoal: Check if toArray returns the same array when passed as an argument and the
4length matches the number of elements in the array.
Reference: ArrayTests.java

testForEach3
Rubric Score: 1.0/1.0
RGoal: Check if forEach throws an IllegalArgumentException when the action throws
an IllegalArgumentException.
Reference: ArrayTests.java

testConstructor3
Rubric Score: 1.0/1.0
:Goal: Check if the array is properly converted to a list.
Reference: ArrayTests.java

testToArray4
Rubric Score: 1.0/1.0
QGoal: Check if toArray returns a new array with the elements from the array and
Hthe specified array length matches the number of elements in the array.
Reference: ArrayTests.java

testReplaceAll
Rubric Score: 1.0/1.0
:Goal: Check if replaceAll does not modify an empty array.
Reference: ArrayTests.java

testToArray
Rubric Score: 1.0/1.0
/Goal: Check if toArray returns an empty array.
Reference: ArrayTests.java

testToArray3
Rubric Score: 1.0/1.0
OGoal: Check if toArray returns the same array when passed as an argument, the
Qlength matches the number of elements in the array, and the elements are copied
to the specified array.
Reference: ArrayTests.java

testForEach
Rubric Score: 1.0/1.0
LGoal: Check if forEach applies the specified action to each element in the
array.
Reference: ArrayTests.java

testConstructor
Rubric Score: 1.0/1.0
OGoal: Check if the default constructor creates an empty array and the size is
zero.
Reference: ArrayTests.java

testReplaceAll2
Rubric Score: 1.0/1.0
QGoal: Check if replaceAll applies the specified operator to each element in the
array.
Reference: ArrayTests.java

testIterator
Rubric Score: 1.0/1.0
FGoal: Check if the iterator returned by iterator() is an instance of
ArrayIterator.
Reference: ArrayTests.java

testForEach2
Rubric Score: 1.0/1.0
RGoal: Check if forEach applies the specified action to each element in the array
&when the action accepts the elements.
Reference: ArrayTests.java

testCountSyllables5
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in a null string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables6
Rubric Score: 1.0/1.0
QGoal: To ensure that the number of syllables in an empty string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSentences4
Rubric Score: 1.0/1.0
QGoal: To ensure that the number of sentences in an empty string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables4
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables7
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables3
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in the text is counted correctly
for a single character word.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables2
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in the text is counted correctly
for a simple word.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSentences2
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of sentences in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSentences3
Rubric Score: 1.0/1.0
QGoal: To ensure that the number of sentences in an empty string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

)testComputeFleschKincaidGradeLevelScore2
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level score is computed correctly
for a simple input.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

)testComputeFleschKincaidGradeLevelScore4
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level score is computed correctly
when the sentence count is 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

*testBardAnalyzerRunAndReturnSortedResults
Rubric Score: 10.0/10.0
NGoal: To verify that BardPlayAnalyzer's runAndReturnResults() method returns
expected results.
!Reference: BardPlayAnalyzer.java

)testComputeFleschKincaidGradeLevelScore3
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level score is computed correctly
for a more complex input.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

(testComputeFleschKincaidGradeLevelScore
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level score is computed correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCalculate4
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level is calculated correctly for
a null string.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCalculate2
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level is calculated correctly for
a string with only vowels.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCalculate5
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level is calculated correctly for
an empty string.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSentences
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of sentences in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountWords
Rubric Score: 1.0/1.0
KGoal: To ensure that the number of words in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCalculate3
Rubric Score: 1.0/1.0
QGoal: To ensure that the Flesch-Kincaid grade level is calculated correctly for
"a string with a single character.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCalculate
Rubric Score: 1.0/1.0
MGoal: To ensure that the Flesch-Kincaid grade level is calculated correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountSyllables
Rubric Score: 1.0/1.0
OGoal: To ensure that the number of syllables in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountItems2
Rubric Score: 1.0/1.0
NGoal: To ensure that the countItems method counts the items in a null string
correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountWords2
Rubric Score: 1.0/1.0
KGoal: To ensure that the number of words in the text is counted correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountWords3
Rubric Score: 1.0/1.0
MGoal: To ensure that the number of words in an empty string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountWords4
Rubric Score: 1.0/1.0
MGoal: To ensure that the number of words in an empty string is counted as 0.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountItems
Rubric Score: 1.0/1.0
IGoal: To ensure that the countItems method counts the items in the text
correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

testCountItems3
Rubric Score: 1.0/1.0
PGoal: To ensure that the countItems method counts the items in an empty string
correctly.
7Reference: FleschKincaidGradeLevelCalculatorTests.java

%testBardAnalyzerProcessActiveObjects
Rubric Score: 1.0/1.0
QGoal: To ensure that BardPlayAnalyzer's processActiveObjects() method processes
4the ActiveObjects and returns the expected results.
&Reference: BardPlayAnalyzerTests.java

*testBardAnalyzerRunAndReturnSortedResults
Rubric Score: 1.0/1.0
NGoal: To verify that BardPlayAnalyzer's runAndReturnResults() method returns
expected results.
&Reference: BardPlayAnalyzerTests.java

"testBardAnalyzerMakeActiveObjects
Rubric Score: 1.0/1.0
EGoal: To ensure that the makeActiveObjects method correctly creates
8ActiveObjects based on the input map and task function.
Reference: ActiveObject.java

#testBardAnalyzerStartActiveObjects
Rubric Score: 1.0/1.0
OGoal: To verify that BardPlayAnalyzer's startActiveObjects() method correctly
starts the ActiveObjects.
&Reference: BardPlayAnalyzerTests.java

"testBardAnalyzerMakeActiveObjects
Rubric Score: 1.0/1.0
PGoal: To ensure that BardPlayAnalyzer's makeActiveObjects() method creates the
"expected number of ActiveObjects.
&Reference: BardPlayAnalyzerTests.java

"testMakeActiveObjectThreadClosure
Rubric Score: 1.0/1.0
NGoal: To ensure that the makeThreadClosure method creates a runnable closure
-correctly and performs the task as expected.
Reference: ActiveObject.java

testBardAnalyzerProcessInput
Rubric Score: 1.0/1.0
KGoal: To verify that BardPlayAnalyzer's processInput() method returns the
#correct result based on the input.
&Reference: BardPlayAnalyzerTests.java

testBardAnalyzerStart
Rubric Score: 1.0/1.0
QGoal: To ensure that the start method properly starts the ActiveObject's thread.
Reference: ActiveObject.java

testActiveObjectConstructor
Rubric Score: 1.0/1.0
JGoal: To ensure that the ActiveObject constructor initializes the object
correctly.
Reference: ActiveObject.java


